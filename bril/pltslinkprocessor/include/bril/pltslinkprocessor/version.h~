// $Id$

/*************************************************************************
 * XDAQ Application Template                     						 *
 * Copyright (C) 2000-2009, CERN.			               				 *
 * All rights reserved.                                                  *
 * Authors: L. Orsini, A. Forrest, A. Petrucci							 *
 *                                                                       *
 * For the licensing terms see LICENSE.		                         	 *
 * For the list of contributors see CREDITS.   					         *
 *************************************************************************/

#ifndef _bril_pltprocessor_version_h_
#define _bril_pltprocessor_version_h_

#include "config/PackageInfo.h"

// !!! Edit this line to reflect the latest package version !!!

#define BRILPLTPROCESSOR_VERSION_MAJOR 1
#define BRILPLTPROCESSOR_VERSION_MINOR 0
#define BRILPLTPROCESSOR_VERSION_PATCH 1
// If any previous versions available E.g. #define ESOURCE_PREVIOUS_VERSIONS "3.8.0,3.8.1"
#define BRILPLTPROCESSOR_PREVIOUS_VERSIONS "1.0.0"

//
// Template macros
//
#define BRILPLTPROCESSOR_VERSION_CODE PACKAGE_VERSION_CODE(BRILPLTPROCESSOR_VERSION_MAJOR,BRILPLTPROCESSOR_VERSION_MINOR,BRILPLTPROCESSOR_VERSION_PATCH)
#ifndef BRILPLTPROCESSOR_PREVIOUS_VERSIONS
#define BRILPLTPROCESSOR_FULL_VERSION_LIST  PACKAGE_VERSION_STRING(BRILPLTPROCESSOR_VERSION_MAJOR,BRILPLTPROCESSOR_VERSION_MINOR,BRILPLTPROCESSOR_VERSION_PATCH)
#else
#define BRILPLTPROCESSOR_FULL_VERSION_LIST  BRILPLTPROCESSOR_PREVIOUS_VERSIONS "," PACKAGE_VERSION_STRING(BRILPLTPROCESSOR_VERSION_MAJOR,BRILPLTPROCESSOR_VERSION_MINOR,BRILPLTPROCESSOR_VERSION_PATCH)
#endif

namespace brilpltprocessor
{
	const std::string package = "brilpltprocessor";
	const std::string versions = BRILPLTPROCESSOR_FULL_VERSION_LIST;
	const std::string summary = "XDAQ brilDAQ pltprocessor";
	const std::string description = "collect and process histograms from pltsource";
	const std::string authors = "K.J.Rose";
	const std::string link = "http://xdaqwiki.cern.ch/";
	config::PackageInfo getPackageInfo ();
	void checkPackageDependencies () throw (config::PackageInfo::VersionException);
	std::set<std::string, std::less<std::string> > getPackageDependencies ();
}

#endif

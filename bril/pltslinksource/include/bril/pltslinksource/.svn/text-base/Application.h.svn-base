// $Id$

/*************************************************************************
 * XDAQ Application Template                     						 *
 * Copyright (C) 2000-2009, CERN.			               				 *
 * All rights reserved.                                                  *
 * Authors: L. Orsini, A. Forrest, A. Petrucci							 *
 *                                                                       *
 * For the licensing terms see LICENSE.		                         	 *
 * For the list of contributors see CREDITS.   					         *
 *************************************************************************/

#ifndef _bril_PLT_Slinkprocessor_Application_h_
#define _bril_PLT_Slinkprocessor_Application_h_

#include <string>

#include "xdaq/Application.h"

#include "xgi/Method.h"
#include "xgi/Output.h"
#include "xgi/exception/Exception.h"

#include "eventing/api/Publisher.h"

#include "xdata/ActionListener.h"
#include "xdata/InfoSpace.h"
#include "toolbox/task/TimerListener.h"
#include "xdata/UnsignedInteger32.h"

#include "bril/pltslinksource/lumiDataFormat.h"
#include "bril/pltslinksource/PLTHit.h"
#include "bril/pltslinksource/PLTPlane.h"

namespace toolbox {
  namespace mem{
    class MemoryPoolFactory;
  }
}
namespace bril
{
	namespace pltslinksource
	{
	  class Application : public xdaq::Application, public eventing::api::Publisher, public xdata::ActionListener, public toolbox::task::TimerListener
	    {
	    public:
	      
	      XDAQ_INSTANTIATOR();
	      
	      Application (xdaq::ApplicationStub* s) throw (xdaq::exception::Exception);
	      ~Application ();
	      
	      void Default (xgi::Input * in, xgi::Output * out) throw (xgi::exception::Exception);
	      
	      void sendMessage (xgi::Input * in, xgi::Output * out) throw (xgi::exception::Exception);
	      virtual void actionPerformed(xdata::Event& e);
	      virtual void timeExpired(toolbox::task::TimerEvent& e);
	      bool Open (std::string const);
	      bool OpenBinary (std::string const);
	      bool OpenTextFile (std::string const);
	      void SetIsText (bool const);
	      int  convPXL (int);
	      bool DecodeSpyDataFifo (uint32_t unsigned, std::vector<PLTHit*>&);
	      int  ReadEventHits (std::vector<PLTHit*>&, uint32_t&, uint32_t&, uint32_t&);
	      int  ReadEventHits (std::ifstream&, std::vector<PLTHit*>&, uint32_t&, uint32_t&, uint32_t&);
    int  ReadEventHitsText (std::ifstream&, std::vector<PLTHit*>&, uint32_t&, uint32_t&, uint32_t&);
	      
	      void ReadPixelMask (std::string const);
	      bool IsPixelMasked (int const);
	      
	      void SetPlaneFiducialRegion (PLTPlane::FiducialRegion);
	      
	      PLTPlane::FiducialRegion fPlaneFiducialRegion;
	    protected:
	      
	      // We are keeping track of the number of messages we have sent
	      size_t count_;
	      void do_stoptimer();
	      void do_starttimer();
	      //void publishData(const std::string&topic,void* dataPtr,size_t datasize,unsigned int runnum,unsigned int lsnum,unsigned int nibnum,unsigned int resourceid);
	      void publishData(const std::string&topic, uint32_t Event, uint32_t Time, uint32_t BX, void* dataPtr, size_t datasize);
	      xdata::InfoSpace *m_appInfoSpace;
	      toolbox::mem::MemoryPoolFactory *m_poolFactory;
	      xdaq::ApplicationDescriptor *m_appDescriptor;
	      std::string m_classname;
	      xdata::UnsignedInteger32 m_instance;
	      toolbox::mem::Pool* m_memPool;
	      std::string m_timername;
	      xdata::UnsignedInteger32 m_currentorb;
	      xdata::UnsignedInteger32 m_currentnib;
	      xdata::UnsignedInteger32 m_currentls;
	      xdata::UnsignedInteger32 m_currentrun;
	      xdata::UnsignedInteger32 m_orbpernib;
	      xdata::UnsignedInteger32 m_nibperls;
	      xdata::UnsignedInteger32 m_lsperrun;
	      xdata::UnsignedInteger32 m_initrun;
	      xdata::UnsignedInteger32 m_nruns;

	      xdata::UnsignedInteger32 m_nibfrequencySec; //how long time (sec) to wait between nibbles
	      xdata::UnsignedInteger32 m_nibfrequencyUSec; //+micro sec	      
	      std::string fFileName;
	      std::ifstream fInfile;
	      bool fIsText;
	      uint32_t fLastTime;
	      int fTimeMult;
	      int fFEDID;
	      std::set<int> fPixelMask;
	      std::vector<PLTHit*> fHits;
	    };
	}
}

#endif

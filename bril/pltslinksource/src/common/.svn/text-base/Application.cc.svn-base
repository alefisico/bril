// $Id$

/*************************************************************************
 * XDAQ Application Template                     						 *
 * Copyright (C) 2000-2009, CERN.			               				 *
 * All rights reserved.                                                  *
 * Authors: L. Orsini, A. Forrest, A. Petrucci							 *
 *                                                                       *
 * For the licensing terms see LICENSE.		                         	 *
 * For the list of contributors see CREDITS.   					         *
 *************************************************************************/

#include <sstream>
#include "cgicc/CgiDefs.h"
#include "cgicc/Cgicc.h"

#include "bril/pltslinksource/Application.h"

#include "eventing/api/exception/Exception.h"

#include "xdata/Properties.h"

#include "b2in/nub/Method.h"
#include "toolbox/mem/HeapAllocator.h"
#include "toolbox/mem/MemoryPoolFactory.h"
#include "toolbox/TimeVal.h"
#include "toolbox/task/TimerFactory.h"
#include "xcept/tools.h"
#include "xdata/InfoSpaceFactory.h"

XDAQ_INSTANTIATOR_IMPL (bril::pltslinksource::Application)

bril::pltslinksource::Application::Application (xdaq::ApplicationStub* s) throw (xdaq::exception::Exception)
	: xdaq::Application(s), eventing::api::Publisher(this)
{
	xgi::bind(this, &bril::pltslinksource::Application::Default, "Default");

	xgi::bind(this, &bril::pltslinksource::Application::sendMessage, "sendMessage");

	m_poolFactory  = toolbox::mem::getMemoryPoolFactory();
	m_appInfoSpace = getApplicationInfoSpace();
	m_appDescriptor= getApplicationDescriptor();
	m_classname    = m_appDescriptor->getClassName();
	m_instance     = m_appDescriptor->getInstance();
	std::string DataFileName = "/data/Slink_20120608.172906.dat";
	fIsText = false;
	fLastTime = 0;
	fTimeMult = 0;				
	fPlaneFiducialRegion = PLTPlane::kFiducialRegion_All;
	Open(DataFileName);
	std::string memPoolName = m_classname + m_instance.toString() + std::string("_memPool");
	toolbox::mem::HeapAllocator* allocator = new toolbox::mem::HeapAllocator();
	toolbox::net::URN urn("toolbox-mem-pool",memPoolName);
	m_memPool = m_poolFactory->createPool(urn,allocator);
	try{
	  // Listen to app infospace
	  m_appInfoSpace->addListener(this, "urn:xdaq-event:setDefaultValues");
	}catch( xcept::Exception & e){
	  XCEPT_RETHROW(xdaq::exception::Exception, "Failed to put parameters into info spaces", e);
	}
}

bril::pltslinksource::Application::~Application ()
{
  do_stoptimer();
}

void bril::pltslinksource::Application::actionPerformed(xdata::Event& e){
  if( e.type() == "urn:xdaq-event:setDefaultValues"){
    count_=0;
    m_timername="lumiPLT_SlinkprocessorTimer";
    m_currentorb=1;
    m_currentnib=1;
    m_currentls=1;
    m_orbpernib=4;
    m_nibperls=16;
    m_lsperrun=4;
    m_initrun=123450;
    m_currentrun=m_initrun;
    m_nruns=4;
    m_nibfrequencySec=3;
    m_nibfrequencyUSec=500000;
    //    m_nibfrequencyUSec=364950;

  }
  do_starttimer();
}
/*
 * This is the default web page for this XDAQ application.
 */
void bril::pltslinksource::Application::Default (xgi::Input * in, xgi::Output * out) throw (xgi::exception::Exception)
{
	*out << "<html>" << std::endl;
	*out << "<head>" << std::endl;
	*out << "<title>XDAQ lumiDAQ PLT_Slinkprocessor</title>" << std::endl;
	*out << "</head>" << std::endl;
	*out << "<body>" << std::endl;

	*out << "XDAQ lumiDAQ PLT_Slinkprocessor" << std::endl;

	*out << "<input type='button' onClick=\"parent.location='sendMessage'\" value='Send next message'>" << std::endl;
	*out << "</br>" << std::endl;
	*out << "Last Published LS : " << count_ << std::endl;

	*out << "</body>" << std::endl;
	*out << "</html>" << std::endl;
}

/*
 * We use this as an activator to send a message
 */
void bril::pltslinksource::Application::sendMessage (xgi::Input * in, xgi::Output * out) throw (xgi::exception::Exception)
{
  count_++;
  
  // In this example we will send a message that is ONLY a property list
  xdata::Properties plist;
  plist.setProperty("messageNumber", toolbox::toString("%d", count_));
  
  // This is how to publish a message. The paramaters are { topic, buffer, propertylist }
  try
    {
      this->publish("dummyplist", 0, plist);
    }
  catch (eventing::api::exception::Exception & e)
    {
      // we are not doing any error handling in these examples. We just log the error
      LOG4CPLUS_ERROR(this->getApplicationLogger(), "Failed to publish");
    }
  // use the default web page
  this->Default(in, out);
}

void bril::pltslinksource::Application::do_stoptimer(){
  toolbox::task::Timer* timer = toolbox::task::TimerFactory::getInstance()->getTimer(m_timername);
  if( timer->isActive() ){
    timer->stop();
  }
}

void bril::pltslinksource::Application::do_starttimer(){
  if(!toolbox::task::TimerFactory::getInstance()->hasTimer(m_timername)){
    (void) toolbox::task::TimerFactory::getInstance()->createTimer(m_timername);
  }
  toolbox::task::Timer* timer = toolbox::task::TimerFactory::getInstance()->getTimer(m_timername);
  toolbox::TimeInterval interval(m_nibfrequencySec,m_nibfrequencyUSec);
  try{
    do_stoptimer();
    toolbox::TimeVal start = toolbox::TimeVal::gettimeofday();
    timer->start();
    timer->scheduleAtFixedRate( start, this, interval, 0, m_timername);
  }catch (toolbox::task::exception::InvalidListener& e){
    LOG4CPLUS_FATAL (this->getApplicationLogger(), xcept::stdformat_exception_history(e));
  }catch (toolbox::task::exception::InvalidSubmission& e){
    LOG4CPLUS_FATAL (this->getApplicationLogger(), xcept::stdformat_exception_history(e));
  }catch (toolbox::task::exception::NotActive& e){
    LOG4CPLUS_FATAL (this->getApplicationLogger(), xcept::stdformat_exception_history(e));
  }catch (toolbox::exception::Exception& e){
    LOG4CPLUS_FATAL (this->getApplicationLogger(), xcept::stdformat_exception_history(e));
  }
}

void bril::pltslinksource::Application::publishData(const std::string&topic, uint32_t Event, uint32_t Time, uint32_t BX, void* dataPtr, size_t datasize){
  try{      
    toolbox::mem::Reference* bufRef = m_poolFactory->getFrame(m_memPool,datasize);
    xdata::Properties plist;
    plist.setProperty("Event", toolbox::toString("%d",Event) );
    plist.setProperty("Time",toolbox::toString("%d",Time) );
    plist.setProperty("BX",toolbox::toString("%d",BX) );
    //    plist.setProperty("resourceid", toolbox::toString("%d",resourceid) );
    memcpy(bufRef->getDataLocation(),dataPtr,datasize);
    bufRef->setDataSize(datasize);

    this->publish(topic, bufRef, plist);
  }catch (eventing::api::exception::Exception & e){
    // we are not doing any error handling in these examples. We just log the error
    LOG4CPLUS_ERROR(this->getApplicationLogger(), "Failed to publish");
  }
}
void bril::pltslinksource::Application::timeExpired(toolbox::task::TimerEvent& e){
  uint32_t fBX = 0;
  uint32_t fEvent = 0;
  uint32_t fTime = 0;

  uint32_t read_check = ReadEventHits(fHits, fEvent, fTime, fBX);
  std::cout << "publishing Slink data with hits: " << read_check << " Event: " << fEvent << " Time: " << fTime << " fBX " << fBX << std::endl;
  
  publishData("PLTRawSlinkEvent", fEvent, fTime, fBX, &fHits, sizeof(fHits));
  for (std::vector<PLTHit*>::iterator i = fHits.begin(); i != fHits.end(); ++i) {
    delete *i;
  }
  fHits.clear();

}

bool bril::pltslinksource::Application::Open (std::string const DataFileName)
{
  if (fIsText) {
    return OpenTextFile(DataFileName);
  } else {
    return OpenBinary(DataFileName);
  }
}



bool bril::pltslinksource::Application::OpenBinary (std::string const DataFileName)
{
  fFileName = DataFileName;
  fInfile.open(fFileName.c_str(),  std::ios::in | std::ios::binary);
  if (!fInfile) {
    std::cerr << "ERROR: cannot open input file: " << fFileName << std::endl;
    return false;
  }

  return true;
}



bool bril::pltslinksource::Application::OpenTextFile (std::string const DataFileName)
{
  fFileName = DataFileName;
  fInfile.open(fFileName.c_str());
  if (!fInfile) {
    std::cerr << "ERROR: cannot open input file: " << fFileName << std::endl;
    return false;
  }

  return true;
}



void bril::pltslinksource::Application::SetIsText (bool const in)
{
  fIsText = in;
  return;
}



int bril::pltslinksource::Application::convPXL (int IN)
{
  return IN % 2 == 1 ? 80 - (IN - 1) / 2 : (IN) / 2 - 80;
}



bool bril::pltslinksource::Application::DecodeSpyDataFifo (uint32_t unsigned word, std::vector<PLTHit*>& Hits)
{
  if (word & 0xfffffff) {

    const uint32_t unsigned plsmsk = 0xff;
    const uint32_t unsigned pxlmsk = 0xff00;
    const uint32_t unsigned dclmsk = 0x1f0000;
    const uint32_t unsigned rocmsk = 0x3e00000;
    const uint32_t unsigned chnlmsk = 0xfc000000;
    uint32_t unsigned chan = ((word & chnlmsk) >> 26);
    uint32_t unsigned roc  = ((word & rocmsk)  >> 21);

    // Check for embeded special words: roc > 25 is special, not a hit
    if (roc > 25) {
      if ((word & 0xffffffff) == 0xffffffff) {
      } else if (roc == 26) {
      } else if (roc == 27) {
      } else {
        //decodeErrorFifo(word);
      }
      return false;
    } else if (chan > 0 && chan < 37) {
      // Oh, NOW we have a hit!
      int mycol = 0;
      if (convPXL((word & pxlmsk) >> 8) > 0) {
        // Odd
        mycol = ((word & dclmsk) >> 16) * 2 + 1;
        //std::cout << "MYCOL A: " << mycol << std::endl;
      } else {
        // Even
        mycol = ((word & dclmsk) >> 16) * 2;
        //std::cout << "MYCOL B: " << mycol << std::endl;
      }

      roc -= 1; // The fed gives 123, and we use the convention 012
      //kga changed fiducial region
      if (roc <= 2) {

        // Check the pixel mask
        if ( !IsPixelMasked( chan*100000 + roc*10000 + mycol*100 + abs(convPXL((word & pxlmsk) >> 8)) ) ) {

          //printf("IN OUT: %10i %10i\n", (word & pxlmsk) >> 8, convPXL((word & pxlmsk) >> 8));
          PLTHit* Hit = new PLTHit((int) chan, (int) roc, (int) mycol, (int) abs(convPXL((word & pxlmsk) >> 8)), (int) (word & plsmsk));

          // only keep hits on the diamond
          if (PLTPlane::IsFiducial(fPlaneFiducialRegion, Hit)) {
            Hits.push_back(Hit);
          } else {
            delete Hit;
          }
        }
      } else {
        //std::cerr << "WARNING: bril::pltslinksource::Application found ROC with number and chan: " << roc << "  " << chan << std::endl;
      }

      //printf("%2lu %1lu %2i %2i %3lu %i\n", chan, (word & rocmsk) >> 21, mycol, abs(convPXL((word & pxlmsk) >> 8)), (word & plsmsk), -1);
      return true;

    }
  }
  return false;
}


int bril::pltslinksource::Application::ReadEventHits (std::vector<PLTHit*>& Hits, uint32_t& Event, uint32_t& Time, uint32_t& BX)
{
  if (fIsText) {
    return ReadEventHitsText(fInfile, Hits, Event, Time, BX);
  } else {
    return ReadEventHits(fInfile, Hits, Event, Time, BX);
  }
}


int bril::pltslinksource::Application::ReadEventHits (std::ifstream& InFile, std::vector<PLTHit*>& Hits, uint32_t& Event, uint32_t& Time, uint32_t& BX)
{
  uint32_t unsigned n1, n2;

  int wordcount = 0;
  bool bheader = true;
  while (bheader) {

    // Read 64-bit word
    InFile.read((char *) &n2, sizeof n2);
    InFile.read((char *) &n1, sizeof n1);

    //std::cout << "n2 : " <<  n2 << " size of n2: " << (sizeof n2) << std::endl;
    //std::cout << "n2 : " <<  n2 << " size of n2: " << (sizeof n2) << std::endl;

    if (InFile.eof()) {
      return -1;
    }

    if ((n1 == 0x53333333) && (n2 == 0x53333333)) {
      //tdc buffer, special handling

      for (int ih = 0; ih < 100; ih++) {

        InFile.read((char *) &n1, sizeof n1);

        if ((n1 & 0xf0000000) == 0xa0000000) {
          InFile.read((char *) &n2, sizeof n2);
          break;
        }
        if (InFile.eof()) {
          return -1;
        }
      }

    } else if ( ((n1 & 0xff000000) == 0x50000000 && ((n2 & 0xfff00) >> 8) == 5 && (n2 & 0xff) == 0 ) || ( ((n2 & 0xff000000) == 0x50000000) && ((n1 & 0xfff00) >> 8) == 5 ) && (n1 & 0xff) == 0 ){
      // Found the header and it has correct FEDID
      wordcount = 1;
      bheader = true;
      Event = (n1 & 0xff000000) == 0x50000000 ? n1 & 0xffffff : n2 & 0xffffff;
      std::cout << "Found Event Header: " << Event << std::endl;

      if ((n1 & 0xff000000) == 0x50000000) {
        BX = ((n2 & 0xfff00000) >> 20);
        fFEDID = ((n2 & 0xfff00) >> 8);
      } else {
        BX = ((n1 & 0xfff00000) >> 20);
        fFEDID = ((n1 & 0xfff00) >> 8);
      }

      while (bheader) {
        InFile.read((char *) &n2, sizeof n2);
        InFile.read((char *) &n1, sizeof n1);
        if (InFile.eof()) {
          return -1;
        }

        ++wordcount;

        if ((n1 & 0xf0000000) == 0xa0000000 || (n2 & 0xf0000000) == 0xa0000000) {
          bheader = false;
          if ((n1 & 0xf0000000) == 0xa0000000) {
            Time = n2;
          } else {
            Time = n1;
          }
          if (Time < fLastTime) {
            ++fTimeMult;
          }

          fLastTime = Time;
          Time = Time + 86400000 * fTimeMult;
          //std::cout << "Found Event Trailer: " << Event << std::endl;
        } else {
          DecodeSpyDataFifo(n2, Hits);
          DecodeSpyDataFifo(n1, Hits);
        }
      }
    }
  }

  return Hits.size();
}




int bril::pltslinksource::Application::ReadEventHitsText (std::ifstream& InFile, std::vector<PLTHit*>& Hits, uint32_t& Event, uint32_t& Time, uint32_t& BX)
{
  int LastEventNumber = -1;
  int EventNumber = -1;

  if (InFile.eof()) {
    return -1;
  }

  int Channel, ROC, Row, Col, ADC;
  std::string Line;
  std::istringstream LineStr;
  while (true) {
    std::getline(InFile, Line);
    LineStr.clear();
    LineStr.str(Line);

    LineStr >> Channel;
    if (LineStr.eof()) {
      break;
    }
    LineStr >> ROC >> Col >> Row >> ADC >> EventNumber;


    if (EventNumber != LastEventNumber && LastEventNumber != -1) {
      InFile.putback('\n');
      for (std::string::reverse_iterator It = Line.rbegin(); It != Line.rend(); ++It) {
        InFile.putback(*It);
      }
      break;
    }

    if ( !IsPixelMasked( Channel*100000 + ROC*10000 + Col*100 + Row ) ) {
      PLTHit* Hit = new PLTHit(Channel, ROC, Col, Row, ADC);
      // only keep hits on the diamond
      if (PLTPlane::IsFiducial(fPlaneFiducialRegion, Hit)) {
        Hits.push_back(Hit);
      } else {
        delete Hit;
      }
      //printf("%2i %2i %2i %2i %5i %9i\n", Channel, ROC, Col, Row, ADC, EventNumber);
    }

    LastEventNumber = EventNumber;
    Event = EventNumber;

  }
  

  return Hits.size();
}



void bril::pltslinksource::Application::ReadPixelMask (std::string const InFileName)
{
  std::cout << "bril::pltslinksource::Application::ReadPixelMask reading file: " << InFileName << std::endl;

  std::ifstream InFile(InFileName.c_str());
  if (!InFile.is_open()) {
    std::cerr << "ERROR: cannot open PixelMask file: " << InFileName << std::endl;
    throw;
  }

  // Loop over header lines in the input data file
  for (std::string line; std::getline(InFile, line); ) {
    if (line == "") {
      break;
    }
  }

  std::istringstream linestream;
  int ch, roc, col, row;
  for (std::string line; std::getline(InFile, line); ) {
    linestream.str(line);
    linestream >> ch >> roc >> col >> row;

    fPixelMask.insert( ch*100000 + roc*10000 + col*100 + row );
  }

  return;
}


bool bril::pltslinksource::Application::IsPixelMasked (int const ChannelPixel)
{
  if (fPixelMask.count(ChannelPixel)) {
    return true;
  }
  return false;
}


void bril::pltslinksource::Application::SetPlaneFiducialRegion (PLTPlane::FiducialRegion in)
{
  std::cout << "bril::pltslinksource::Application::SetPlaneFiducialRegion setting region: " << in << std::endl;
  fPlaneFiducialRegion = in;
  return;
}

